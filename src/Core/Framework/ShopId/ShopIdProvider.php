<?php declare(strict_types=1);

namespace Swag\SaasConnect\Core\Framework\ShopId;

use Shopware\Core\System\SystemConfig\SystemConfigService;

class ShopIdProvider
{
    public const SHOP_ID_SYSTEM_CONFIG_KEY = 'saas.shopId';

    /**
     * @var iterable|array<ShopIdProviderStrategy>
     */
    private $shopIdProviders;

    /**
     * @var SystemConfigService
     */
    private $systemConfigService;

    /**
     * @param iterable|array<ShopIdProviderStrategy> $shopIdProviders
     */
    public function __construct(iterable $shopIdProviders, SystemConfigService $systemConfigService)
    {
        $this->shopIdProviders = $shopIdProviders;
        $this->systemConfigService = $systemConfigService;
    }

    public function getShopId(string $appId): string
    {
        $shopIds = $this->systemConfigService->get(self::SHOP_ID_SYSTEM_CONFIG_KEY);
        if ($shopIds === null) {
            $shopIds = [];
        }

        // checks if an id was already generated for that app
        foreach ($shopIds as $shopId) {
            if (in_array($appId, $shopId['apps'] ?? [], true)) {
                return $shopId['value'];
            }
        }

        /** @var ShopIdProviderStrategy $shopIdProvider */
        foreach ($this->shopIdProviders as $shopIdProvider) {
            $shopId = $this->getIdFromProvider($shopIdProvider, $shopIds);

            if (!$shopId) {
                continue;
            }

            $this->saveGeneratedId($shopIdProvider, $appId, $shopId, $shopIds);

            return $shopId;
        }

        throw new NoSupportedShopIdProviderException();
    }

    /**
     * Returns the previously generated Id generated by that strategy
     * or generates a new Id otherwise
     *
     * @param array<string, array<string, string|array<string>>> $shopIds
     */
    private function getIdFromProvider(ShopIdProviderStrategy $shopIdProvider, array $shopIds): ?string
    {
        if (array_key_exists($shopIdProvider->getName(), $shopIds)) {
            /** @var string $shopId */
            $shopId = $shopIds[$shopIdProvider->getName()]['value'];

            return $shopId;
        }
        if ($shopIdProvider->isSupported()) {
            return $shopIdProvider->getShopId();
        }

        return null;
    }

    /**
     * Saves the generated Id and the apps for which it is used
     *
     * @param array<string, array<string, string|array<string>>> $shopIds
     */
    private function saveGeneratedId(
        ShopIdProviderStrategy $shopIdProvider,
        string $appId,
        string $shopId,
        array $shopIds
    ): void {
        /** @var array<string> $apps */
        $apps = $shopIds[$shopIdProvider->getName()]['apps'] ?? [];
        $apps[] = $appId;

        $shopIds[$shopIdProvider->getName()] = [
            'value' => $shopId,
            'apps' => $apps,
        ];

        $this->systemConfigService->set(self::SHOP_ID_SYSTEM_CONFIG_KEY, $shopIds);
    }
}
